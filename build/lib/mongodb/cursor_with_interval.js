// Generated by CoffeeScript 1.3.1
(function() {
  var Cursor, CursorWithInterval, mongo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  mongo = require('mongodb');

  Cursor = mongo.Cursor;

  module.exports = CursorWithInterval = (function(_super) {

    __extends(CursorWithInterval, _super);

    CursorWithInterval.name = 'CursorWithInterval';

    function CursorWithInterval(cursor, interval) {
      this.cursor = cursor;
      this.interval = interval != null ? interval : 300;
      if (!(this.cursor != null)) {
        throw new Error('cursor instance is mandatory');
      }
    }

    CursorWithInterval.prototype.intervalEach = function(interval, callback) {
      var _this = this;
      if (!(callback != null)) {
        throw new Error('callback is mandatory');
      }
      if (this.state() !== Cursor.CLOSED) {
        return setTimeout((function() {
          return _this.nextObject(function(err, item) {
            if (err != null) {
              return callback(err, null);
            }
            if (item != null) {
              callback(null, item);
              _this.intervalEach(interval, callback);
            } else {
              _this.state(Cursor.CLOSED);
              callback(err, null);
            }
            return item = null;
          });
        }), interval);
      } else {
        return callback(new Error('Cursor is closed'), null);
      }
    };

    CursorWithInterval.prototype.each = function(callback) {
      return this.intervalEach(this.interval, callback);
    };

    CursorWithInterval.prototype.state = function(state) {
      if (state == null) {
        state = null;
      }
      if (state !== null) {
        this.cursor.state = state;
      }
      return this.cursor.state;
    };

    CursorWithInterval.prototype.nextObject = function(err, item) {
      return this.cursor.nextObject(err, item);
    };

    return CursorWithInterval;

  })(Cursor);

}).call(this);
